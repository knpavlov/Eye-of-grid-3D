        }
      } catch {}
      try { updateUI(); }catch{}
      // Если начался новый ход — синхронизируем порядок анимаций как в офлайне:
      // 1) Заставка хода с корректным заголовком, 2) Анимация маны, 3) Добор
      // Упрощенная и надежная система обработки нового хода
      try {
        const isNewTurn = (typeof state.turn === 'number') && (state.turn > ((prev && typeof prev.turn === 'number') ? prev.turn : (__lastTurnSeen || 0)));
        if (isNewTurn) {
          console.log(`[NETWORK] Processing new turn ${state.turn} (prev: ${prev?.turn || 'none'})`);
          
          // 1. Показываем заставку хода (если еще не показывали этот ход)
          if (lastSplashTurnShown < state.turn) {
            console.log(`[NETWORK] Showing turn splash for turn ${state.turn}`);
            try {
              if (window.__ui && window.__ui.banner) {
                const b = window.__ui.banner;
                if (typeof b.ensureTurnSplashVisible === 'function') {
                  await b.ensureTurnSplashVisible(3, state.turn);
                } else if (typeof b.forceTurnSplashWithRetry === 'function') {
                  await b.forceTurnSplashWithRetry(3, state.turn);
                }
              }
              lastSplashTurnShown = state.turn;
            } catch (e) {
              console.error('[NETWORK] Turn splash failed:', e);
            }
          }
          
          // 2. Анимация маны активного игрока
          const owner = (typeof state.active === 'number') ? state.active : 0;
          const beforeM = Math.max(0, (prev?.players?.[owner]?.mana ?? 0));
          const afterM = Math.max(0, (state?.players?.[owner]?.mana ?? 0));
          
          // Expose _beforeMana for UI clamping until animation completes
          try { if (typeof window !== 'undefined' && window.gameState && window.gameState.players && window.gameState.players[owner]) { window.gameState.players[owner]._beforeMana = beforeM; } } catch {}

          if (afterM > beforeM) {
            console.log(`[NETWORK] Animating mana for player ${owner}: ${beforeM} -> ${afterM}`);
            try {
              if (window.__ui && window.__ui.mana && typeof window.__ui.mana.animateTurnManaGain === 'function') {
